name: Test Coverage and Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Global timeout for the entire job
    strategy:
      matrix:
        python-version: ["3.12"]

    env:
      PYTHONPATH: ${{ github.workspace }}/src
      # Removed PYTEST_DISABLE_PLUGIN_AUTOLOAD=1 for better async support
      PYTHONDONTWRITEBYTECODE: 1  # Skip .pyc files for faster startup
      CI: true

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Lint with flake8
        run: |
          uv run flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          uv run flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          uv run black --check src tests

      - name: Import sort check with isort
        run: |
          uv run isort --check-only src tests

      - name: Type check with mypy
        run: |
          uv run mypy src

      - name: Run safety-critical tests
        run: |
          uv run python scripts/run_tests.py --suite safety
        timeout-minutes: 5

      - name: Run unit tests with coverage
        run: |
          uv run python scripts/run_tests.py --suite unit
        timeout-minutes: 10

      - name: Run integration tests
        run: |
          uv run python scripts/run_tests.py --suite integration
        timeout-minutes: 8

      - name: Run performance tests
        run: |
          uv run python scripts/run_tests.py --suite performance
        timeout-minutes: 6

      - name: Run chaos tests
        run: |
          uv run python scripts/run_tests.py --suite chaos
        timeout-minutes: 6

      - name: Generate coverage report
        run: |
          uv run python scripts/run_tests.py --coverage-only
        timeout-minutes: 2

      - name: Validate quality gates
        run: |
          uv run python scripts/run_tests.py --quality-gates

      # - name: Upload coverage reports to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./test-reports/coverage.xml
      #     flags: unittests
      #     name: codecov-umbrella
      #     fail_ci_if_error: true

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

      - name: Coverage Badge
        uses: tj-actions/coverage-badge-py@v2
        with:
          output: coverage.svg

      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v16
        id: verify-changed-files
        with:
          files: coverage.svg

      - name: Commit files
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add coverage.svg
          git commit -m "chore: updated coverage.svg"

      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Run security scan with bandit
        run: |
          uv add bandit[toml]
          uv run bandit -r src -f json -o security-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json

  performance-benchmarks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Run performance benchmarks
        run: |
          uv run python scripts/run_tests.py --suite performance --verbose --no-coverage

      - name: Store benchmark result
        continue-on-error: true
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "customSmallerIsBetter"
          output-file-path: test-reports/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: "200%"
          fail-on-alert: false
          skip-fetch-gh-pages: true
