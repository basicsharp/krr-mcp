name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "0.4.30"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run linting
      run: |
        uv run black --check src tests
        uv run isort --check-only src tests
        uv run flake8 src tests

    - name: Run type checking
      run: uv run mypy src

    - name: Run unit tests
      run: |
        uv run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=75 \
          --junit-xml=test-results.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: basicsharp/krr-mcp

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run security scan with bandit
      run: |
        uv add bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json
        uv run bandit -r src/ -f txt

    - name: Run dependency security scan
      run: |
        uv add pip-audit
        uv run pip-audit --format json --output pip-audit-report.json
        uv run pip-audit

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          pip-audit-report.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Build package
      run: |
        uv build
        ls -la dist/

    - name: Test uvx compatibility
      run: |
        uvx --help || echo "uvx not available, skipping compatibility test"
        if command -v uvx &> /dev/null; then
          wheel_file=$(ls dist/*.whl | head -1)
          uvx --from "$wheel_file" krr-mcp-server --help || echo "uvx test failed"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Check package integrity
      run: |
        uv add twine
        uv run twine check dist/*

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: krrmcp/krr-mcp-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run security scan on Docker image
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: krrmcp/krr-mcp-server:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Set up kind cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: krr-test
        config: tests/kind-config.yaml

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run integration tests
      run: |
        uv run pytest tests/test_integration_cluster.py -v \
          --tb=short \
          --timeout=300
      env:
        KUBERNETES_CONTEXT: kind-krr-test

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in ${{ github.ref_name }}

          See [CHANGELOG.md](https://github.com/krr-mcp/krr-mcp-server/blob/main/CHANGELOG.md) for details.

          ### Installation

          **PyPI:**
          ```bash
          pip install krr-mcp-server==${{ github.ref_name }}
          ```

          **uvx:**
          ```bash
          uvx krr-mcp-server
          ```

          **Docker:**
          ```bash
          docker run krrmcp/krr-mcp-server:${{ github.ref_name }}
          ```
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        username: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Notify on success
      if: needs.release.result == 'success'
      run: |
        echo "üéâ Release ${{ github.ref_name }} completed successfully!"
        echo "Package published to PyPI and Docker Hub"

    - name: Notify on failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "Check the logs for details"
        exit 1
